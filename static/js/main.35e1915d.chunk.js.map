{"version":3,"sources":["components/PokemonCell.js","components/PokemonList.js","components/PokemonViewerStats.js","components/PokemonViewer.js","components/PokedexControls.js","components/Pokedex.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","_this","this","react_default","a","createElement","className","alt","props","name","onClick","choosePokemon","id","src","concat","Component","PokemonList","state","pokemon","isLoaded","_this2","fetch","then","json","_ref","setState","apply","Object","toConsumableArray","results","catch","error","console","log","_this3","pokeList","map","i","PokemonCell_Pokemon","val","key","url","style","transform","translate","PokemonViewerStats","stat","width","base_stat","PokemonViewer","prevProps","prevState","pokeId","nextProps","nextState","statBars","typeSpan","stats","PokemonViewerStats_PokemonViewerStats","types","type","sprites","front_default","PokemonControls","translation","setTranslate","up","Pokedex","chosenPokemon","PokemonList_PokemonList","PokemonViewer_PokemonViewer","PokedexControls_PokemonControls","App","Pokedex_Pokedex","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35e1915d.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Pokemon extends Component {\n  render() {\n    return (\n      <div className=\"pokemon\">\n        <img alt={this.props.name} onClick={()=> {this.props.choosePokemon(this.props.id)}} src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${this.props.id}.png`} />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PokemonCell from './PokemonCell'\n\nexport default class PokemonList extends Component {\n\n  state = {\n    pokemon: [],\n    isLoaded: false\n  }\n\n  componentDidMount () {\n    fetch('https://pokeapi.co/api/v2/pokemon?limit=151')\n      .then( pokemon => pokemon.json())\n      .then( (pokemon) =>{\n        this.setState({\n          pokemon: [].concat(...pokemon.results),\n          isLoaded: true\n        })\n      }\n      ).catch(error => {\n       console.log(error)\n    })\n  }\n\n  render ()  {\n\n    const pokeList = this.state.pokemon.map((pokemon,i) => (\n      <PokemonCell choosePokemon={(val)=>this.props.choosePokemon(val)} key={pokemon.name} name={pokemon.name} id={i + 1} url={pokemon.url}/>\n    ));\n\n    return (\n      <div className=\"pokemon-list\">\n        <div style={{transform: `translateY(${this.props.translate}px)`}} className=\"pokemon-list__container\">\n          { this.state.isLoaded? pokeList : <div className=\"Loading\">Loading</div>}\n        </div>\n      </div>\n    );\n  }\n}\n\n","import React, { Component } from 'react'\n\nexport default class PokemonViewerStats extends Component {\n  render() {\n    return (\n      <div className=\"bar-container\">\n        <p>{this.props.stat.stat.name}</p>\n        <div className=\"bar\">\n          <div className={`${this.props.stat.stat.name} attribute` } style={{width: this.props.stat.base_stat + '%'}}></div> \n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PokemonViewerStats from './PokemonViewerStats'\nexport default class PokemonViewer extends Component {\n  state = {\n    pokemon: {},\n    isLoaded: false,\n  }\n\n  componentDidUpdate(prevProps,prevState){\n    if (prevState.pokemon === this.state.pokemon) {\n      console.log('component update if equal to prevent infinite loop')\n      console.log('--------------------')\n      fetch('https://pokeapi.co/api/v2/pokemon/' + this.props.pokeId)\n      .then( pokemon => pokemon.json())\n      .then(\n        pokemon => {this.setState({ pokemon: pokemon, isLoaded: true })\n        },\n        error => console.log(error)\n      )\n    } else {\n      console.log('no calls made')\n      console.log('--------------------')\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState){\n    if (nextProps.pokeId === this.state.pokemon.id) {\n      console.log('Should component false')\n      return false\n    }\n    console.log('Should component true')\n    return true\n  }\n\n  componentDidMount(){\n    console.log('mounted')\n    // this.setState({\n    //   pokeId: this.props.pokeId\n    // })\n  }\n\n\n  render() {\n    let statBars, typeSpan\n    if(this.state.isLoaded){\n      statBars = this.state.pokemon.stats.map((stat,i) => (\n        <PokemonViewerStats key={i} stat={stat}/>\n      ))\n      typeSpan = this.state.pokemon.types.map((type,i) => (\n        <span key={i} className={type.type.name}>{type.type.name}</span>\n      ))\n    }\n\n    return (\n      <div className=\"pokemon-viewer\">\n        { this.state.isLoaded ? \n          <div className=\"pokemon-details-container\">\n            <img alt={this.state.pokemon.name} src={this.state.pokemon.sprites.front_default} />\n            <h3>{this.state.pokemon.name}</h3>\n            <div className=\"type-container\">{typeSpan}</div>\n            {statBars} \n          </div>\n          : 'Choose a Pokemon'}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class PokemonControls extends Component {\n  state = {\n    translation: 0\n  }\n\n  translate = (val) => {\n    console.log('translating ' + (this.state.translation + val))\n    if(this.state.translation + val <= 0 && this.state.translation + val >= -7128){\n      this.setState({\n        translation: this.state.translation + val\n      }, ()=> {\n        this.props.setTranslate(this.state.translation)\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"pokedex-controls\">\n        <div onClick={(up)=>this.translate(396)} className=\"triangle up\"></div>\n        <div onClick={(up)=>this.translate(-396)}className=\"triangle down\"></div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PokemonList from './PokemonList'\nimport PokemonViewer from './PokemonViewer'\nimport PokedexControls from './PokedexControls'\n\nexport default class Pokedex extends Component {\n  state = {\n    isLoaded: false,\n    translate: 0\n  }\n\n  choosePokemon = (val) => {\n    this.setState({\n      chosenPokemon: val\n    })\n  }\n\n  setTranslate = (translate) => {\n    console.log('pokedex' + translate)\n     this.setState({\n      translate: translate\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"pokedex\">\n        {/* <PokedexHeader /> */}\n        <PokemonList\n          pokemon={this.state.pokemon}\n          choosePokemon={(val) => this.choosePokemon(val)}\n          translate={this.state.translate}/>\n        <PokemonViewer\n          pokeId={this.state.chosenPokemon}\n          />\n        <PokedexControls setTranslate={(translate)=> this.setTranslate(translate)}/>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport Pokedex from './components/Pokedex'\nimport './App.css'\n\nclass App extends React.Component{\n  render ()  {\n    return (\n      <Pokedex/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}